// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: users.proto

package users_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UsersV1_Create_FullMethodName = "/users_v1.UsersV1/Create"
	UsersV1_Get_FullMethodName    = "/users_v1.UsersV1/Get"
	UsersV1_GetAll_FullMethodName = "/users_v1.UsersV1/GetAll"
	UsersV1_Update_FullMethodName = "/users_v1.UsersV1/Update"
	UsersV1_Delete_FullMethodName = "/users_v1.UsersV1/Delete"
)

// UsersV1Client is the client API for UsersV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersV1Client interface {
	Create(ctx context.Context, in *CreateIn, opts ...grpc.CallOption) (*CreateOut, error)
	Get(ctx context.Context, in *GetIn, opts ...grpc.CallOption) (*GetOut, error)
	GetAll(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error)
	Update(ctx context.Context, in *UpdateIn, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteIn, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type usersV1Client struct {
	cc grpc.ClientConnInterface
}

func NewUsersV1Client(cc grpc.ClientConnInterface) UsersV1Client {
	return &usersV1Client{cc}
}

func (c *usersV1Client) Create(ctx context.Context, in *CreateIn, opts ...grpc.CallOption) (*CreateOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOut)
	err := c.cc.Invoke(ctx, UsersV1_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersV1Client) Get(ctx context.Context, in *GetIn, opts ...grpc.CallOption) (*GetOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOut)
	err := c.cc.Invoke(ctx, UsersV1_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersV1Client) GetAll(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOut)
	err := c.cc.Invoke(ctx, UsersV1_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersV1Client) Update(ctx context.Context, in *UpdateIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UsersV1_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersV1Client) Delete(ctx context.Context, in *DeleteIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UsersV1_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersV1Server is the server API for UsersV1 service.
// All implementations must embed UnimplementedUsersV1Server
// for forward compatibility.
type UsersV1Server interface {
	Create(context.Context, *CreateIn) (*CreateOut, error)
	Get(context.Context, *GetIn) (*GetOut, error)
	GetAll(context.Context, *GetAllIn) (*GetAllOut, error)
	Update(context.Context, *UpdateIn) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteIn) (*emptypb.Empty, error)
	mustEmbedUnimplementedUsersV1Server()
}

// UnimplementedUsersV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsersV1Server struct{}

func (UnimplementedUsersV1Server) Create(context.Context, *CreateIn) (*CreateOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUsersV1Server) Get(context.Context, *GetIn) (*GetOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUsersV1Server) GetAll(context.Context, *GetAllIn) (*GetAllOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUsersV1Server) Update(context.Context, *UpdateIn) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUsersV1Server) Delete(context.Context, *DeleteIn) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUsersV1Server) mustEmbedUnimplementedUsersV1Server() {}
func (UnimplementedUsersV1Server) testEmbeddedByValue()                 {}

// UnsafeUsersV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersV1Server will
// result in compilation errors.
type UnsafeUsersV1Server interface {
	mustEmbedUnimplementedUsersV1Server()
}

func RegisterUsersV1Server(s grpc.ServiceRegistrar, srv UsersV1Server) {
	// If the following call pancis, it indicates UnimplementedUsersV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsersV1_ServiceDesc, srv)
}

func _UsersV1_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersV1Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersV1_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersV1Server).Create(ctx, req.(*CreateIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersV1_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersV1Server).Get(ctx, req.(*GetIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersV1_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersV1Server).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersV1_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersV1Server).GetAll(ctx, req.(*GetAllIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersV1_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersV1Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersV1_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersV1Server).Update(ctx, req.(*UpdateIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersV1_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersV1Server).Delete(ctx, req.(*DeleteIn))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersV1_ServiceDesc is the grpc.ServiceDesc for UsersV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users_v1.UsersV1",
	HandlerType: (*UsersV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UsersV1_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UsersV1_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UsersV1_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UsersV1_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UsersV1_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
